package ufal.ic;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author manoel
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        setLocation(500,100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        files = new javax.swing.JLabel();
        LoadVars = new javax.swing.JButton();
        SelectFiles = new javax.swing.JButton();
        StartButton = new javax.swing.JButton();
        moveBack = new javax.swing.JButton();
        move = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        dict_filename_to_filepath = new HashMap<>();
        reader = new Reader();

        progressBar = new javax.swing.JProgressBar();
        progressBar.setValue(0);
        progressBar.setBorderPainted(true);
        progressBar.setStringPainted(true);

        listModelFromHeader = new DefaultListModel();
        listModelFromWatchList = new DefaultListModel();
        listModelFromFileChooser = new DefaultListModel();

        WatchList = new javax.swing.JList<>();
        WatchList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        WatchList.setModel(listModelFromWatchList);

        VarList = new javax.swing.JList<>();
        VarList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        VarList.setModel(listModelFromHeader);

        FilesList = new javax.swing.JList<>();
        FilesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        FilesList.setModel(listModelFromFileChooser);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setViewportView(VarList);

        jLabel2.setText("Variables List");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(jLabel2)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );


        jScrollPane3.setViewportView(WatchList);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                                .addContainerGap())
        );

        jLabel3.setText("Watch List");

        jScrollPane1.setViewportView(FilesList);

        SelectFiles.setText("Select Files");
        SelectFiles.addActionListener(evt -> SelectFilesButtonActionPerformed(evt));

        StartButton.setText("Start");
        StartButton.addActionListener(evt -> StartButtonActionPerformed(evt));

        files.setText("Files");

        LoadVars.setText("Load Variables");
        LoadVars.addActionListener(evt -> LoadVarsActionPerformed(evt));

        move.setText(">");
        move.addActionListener(evt -> moveActionPerformed(evt));

        moveBack.setText("<");
        moveBack.addActionListener(evt -> moveBackActionPerformed(evt));

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(evt -> removeActionPerformed(evt));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(move, javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(moveBack)))
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                                .addComponent(jLabel3)
                                                                                .addComponent(LoadVars)
                                                                                .addGroup(layout.createSequentialGroup()
                                                                                        .addComponent(SelectFiles)
                                                                                        .addGap(8, 8, 8)))
                                                                        .addGap(78, 78, 78)))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(StartButton)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(RemoveButton)
                                                                .addGap(52, 52, 52)))))
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(files)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(files)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                .addGap(12, 12, 12))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(44, 44, 44)
                                                .addComponent(SelectFiles)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(LoadVars)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(StartButton)
                                                        .addComponent(RemoveButton))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(moveBack)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(move)
                                                .addGap(108, 108, 108)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>

    private void SelectFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {
        //Define my filter and set it as default
        FileFilter filter = new FileNameExtensionFilter("DataBase Files", "csv", "txt");
        JFileChooser jc = new JFileChooser();
        jc.setMultiSelectionEnabled(true);
        jc.addChoosableFileFilter(filter);
        jc.setFileFilter(filter);
        int returnValue = jc.showOpenDialog(null);

        if(returnValue == JFileChooser.APPROVE_OPTION){
            StartButton.setEnabled(true);
            filepath = jc.getSelectedFiles();
            DefaultListModel<String> filenames_to_be_shown = (DefaultListModel<String>)FilesList.getModel();
            for(File each_item : filepath){
                String[] tmpPath = each_item.toString().split("\\\\");
                //show only the file name
                String tmpFilename = tmpPath[tmpPath.length-1].split("\\.")[0];
                filenames_to_be_shown.addElement(tmpFilename);
                //full path
                dict_filename_to_filepath.put(tmpFilename, each_item.toString());
            }
        }
    }

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        //If there is a file selected
        String selected_file = FilesList.getSelectedValue();
        int size = WatchList.getModel().getSize();
        String[] elementsOnWatchList = new String[size];
            for(int i = 0; i < size; i++){
                elementsOnWatchList[i] = WatchList.getModel().getElementAt(i);
            }
        StartButton.setEnabled(false);
        reader.readFileContent(dict_filename_to_filepath.get(selected_file), elementsOnWatchList);
    }

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String filename = FilesList.getSelectedValue();
        DefaultListModel<String> files = (DefaultListModel<String>) FilesList.getModel();
        for (int i = 0; i < files.getSize();i++){
            if(files.get(i).equals(filename)){
                files.remove(i);
                dict_filename_to_filepath.remove(i);
            }
        }
        if(((DefaultListModel<String>) FilesList.getModel()).isEmpty())
            StartButton.setEnabled(false);

        //Clear the variables loaded and watch listed
        DefaultListModel<String> variablesList;
        variablesList = (DefaultListModel<String>) VarList.getModel();
        variablesList.clear();
        variablesList = (DefaultListModel<String>) WatchList.getModel();
        variablesList.clear();

    }

    private void LoadVarsActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String filepath = FilesList.getSelectedValue();
        reader.readFileHeader(dict_filename_to_filepath.get(filepath.toString()));
    }

    private void moveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        List<String> selected = VarList.getSelectedValuesList();
        DefaultListModel<String> left = (DefaultListModel<String>) VarList.getModel();
        DefaultListModel<String> right = (DefaultListModel<String>)WatchList.getModel();
        for(String item : selected){
            left.removeElement(item);
            right.addElement(item);
        }
    }

    private void moveBackActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        List<String> selected = WatchList.getSelectedValuesList();
        DefaultListModel<String> left = (DefaultListModel<String>) VarList.getModel();
        DefaultListModel<String> right = (DefaultListModel<String>)WatchList.getModel();
        for(String item : selected){
            right.removeElement(item);
            left.addElement(item);
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    public static void setVarList(String[] newList){

        //first clear the list from last input
        listModelFromHeader.clear();
        listModelFromWatchList.clear();

        for(String each : newList)
            listModelFromHeader.addElement(each);

    }

    public static void showErrorMessagePopUp(String Message){
        JOptionPane.showMessageDialog(null, Message);
    }

    // Variables declaration - do not modify
    private javax.swing.JButton SelectFiles;
    private javax.swing.JButton LoadVars;
    private javax.swing.JLabel files;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton move;
    private javax.swing.JButton moveBack;
    public static javax.swing.JButton StartButton;
    public static javax.swing.JButton RemoveButton;
    public static javax.swing.JProgressBar progressBar;
    private static javax.swing.JList<String> FilesList;
    private static javax.swing.JList<String> WatchList;
    private static javax.swing.JList<String> VarList;
    private static DefaultListModel listModelFromHeader;
    private static DefaultListModel listModelFromWatchList;
    private static DefaultListModel listModelFromFileChooser;
    private Map<String, String> dict_filename_to_filepath;
    private Reader reader;
    private File[] filepath;
    // End of variables declaration
}